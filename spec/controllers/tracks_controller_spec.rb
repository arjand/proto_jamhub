require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TracksController do

  # This should return the minimal set of attributes required to create a valid
  # Track. As you add validations to Track, be sure to
  # update the return value of this method accordingly.
  context 'routing' do
    it {should route(:get, '/tracks/new').to :action => :new}
    it {should route(:post, '/tracks').to :action => :create}
    it {should route(:get, '/tracks/1').to :action => :show, :id => 1}
    it {should route(:get, '/tracks/1/edit').to :action => :edit, :id => 1}
    it {should route(:put, '/tracks/1').to :action => :update, :id => 1}
    it {should route(:delete, '/tracks/1').to :action => :destroy, :id => 1}
    it {should route(:get, '/tracks').to :action => :index}
  end

  let(:track) {FactoryGirl.create :track}
  let(:user) {FactoryGirl.create :user}
  let(:valid_attributes) {{ :title => 'track of greatness'}}
  let(:valid_parameters) {{:track => valid_attributes, :id => track.id, :description => 'beautiful music'}}
  let(:invalid_attributes) {{:title => ''}}
  let(:invalid_parameters) {{:track => invalid_attributes, :id => track.id}}

  context 'GET new' do
    before {get :new, {}, {'user_id' => user.id}}
    it {should render_template :new}
  end

  context 'POST create' do
    context 'with valid parameters' do
      it 'creates a new track' do
        expect {post :create, valid_parameters, {'user_id' => user.id}}.to change(Track, :count).by(1)
      end

      before {post :create, valid_parameters, {'user_id' => user.id}}
      it {should redirect_to track_path(Track.last)}
      it {should set_the_flash[:notice]}
    end

    context 'with invalid parameters' do
      before do
        request.env["HTTP_REFERER"] = "where_i_came_from"
        post :create, invalid_parameters, {'user_id' => user.id}
      end
      it {should redirect_to "where_i_came_from"}
    end
  end

  context 'GET index' do
    before {get :index}

    it {should render_template :index}
  end

  context 'GET edit' do
    context 'with authorized session' do
      before {get :edit, {:id => track.id}, {'user_id' => user.id}}
      it {should render_template :edit}
    end

    context 'without authorized session' do
      before {get :edit, {:id => track.id}, {}}
      it {should redirect_to login_path}
      it {should set_the_flash[:alert]}
    end
  end

  context 'PUT update' do
    context 'with valid parameters' do
      before {put :update, valid_parameters, {'user_id' => user.id}}

      it 'updates the track' do
        Track.find(track.id).title.should eq valid_attributes[:title]
      end

      it {should redirect_to track_path(track)}
      it {should set_the_flash[:notice]}
    end

    context 'with invalid parameters' do
      before {put :update, invalid_parameters, {'user_id' => user.id}}

      it {should render_template :edit}
    end
  end

  context 'GET show' do
    before {get :show, {:id => track.id}}

    it {should render_template :show}
  end

  context 'DELETE destroy' do
    it 'destroys a track' do
      factory_track = FactoryGirl.create :track 
      expect {delete :destroy, {:id => factory_track.id}, {'user_id' => user.id}}.to change(Track, :count).by(-1)
    end

    before {delete :destroy, {:id => track.id}, {'user_id' => user.id}}

    it {should redirect_to tracks_path}
    it {should set_the_flash[:notice]}
  end

end
